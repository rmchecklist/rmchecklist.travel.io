https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django

Django - Python web framework

How it works?
                               -->Template                                  
Http Reqquest --> URLS.py --> View.py --> HTTP response
                              <----> Models.py
                              
                              
URL.py --> All http request will direct to url.py and it is redirected to respective view.py

view --> Request handler function, receioved http request and returns http response, 
            it access the data needed to satisfy requests via models and delegate the formatting of the response to templates.
            
Model --> Model are python objects that define the structure of application data.
            
Templates --> it defines the structure or layout of the file.

Django refers Model View Template(MVT) which is similar to MVC architecture

Sending the request to the right view(urls.py)
----------------------------------------------
urlpatterns = [
    path('admin/', admin.site.urls),
    path('book/<int:id>/', views.book_detail, name='book_detail'),
    path('catalog/', include('catalog.urls')),
    re_path(r'^([0-9]+)/$', views.best),
]

urlpatterns object is list of path/re_path functions

path(part of the url, function, will be called when the pattern is matched)

e,g views.book_detail --> Book detail can be found in views.py(inside file named views.py)


Handling the request(views.py)
------------------------------


view.py

from django.http import HttpResponse

def index(request):
return HttpRespinse("Hello world")

defining a data model(models.py)
--------------------------------


from django.db import models

class Team(models.Model):
  team_name = models.CharField(max_length=40)
  
  TTEAM_LEVELS = (
        ('U09', 'Under 09s'),
        ('U10', 'Under 10s'),
        ('U11', 'Under 11s'),
        ...  #list other team levels
    )
    
    team_level = models.CharField(max_length=3, choices=TEAM_LEVELS, default='U11')
    
    
    Quering data (views.py)
    ------------------------
    
    from django.shortcuts import render
    from .models import Team
    
    def index(request):
      list_teams = Team.Objects.filter(team_level_exact = 'U09')
      context = {'youngest_teams': list_teams}
      return render(request, '/best/index.html', context)
      
    Rendering data(HTML templates)
    ------------------------------
    
    
   What else can do?
   
   Forms
   User authentication and permissions
   Caching
   Admin site
   Serializing data
   
   
   Install python windows
   
   python version ==> py -3 -V
   
   list the installed pip3 ==> pip3 list
   
   1. install virtual env ==> pip install virtualenvwrapper-win
   
   2. Creating a vitual environment ==> mkvirtualenv project_name
            1. deactivate - Exit out of the current python virtual environment
            2. workon - List avaialble virtual environment
            3. workon name_of_environment - Activate teh spcified python vitual environemnt
            4. rmvirtualenv name_of_env - Remove the speificed the env
    3. Installing Django ==> pip install django~=3.1
    4. Django version ==> python -m django --version or py -m django --version
    5. Start project ==> django-admin startproject mytestsite
    6. Run the web server ==> python manage.py runserver
    7. Check the server status my navigating to http://127.0.0.1:8000/
    
    
    Part-2 :: Creating a skeleton website:
    ======================================
    1. Create new project ==> django-admin startproject locallibrary
    2. file directory
          locallibrary/
              manage.py
              locallibrary/
                  __init__.py
                  settings.py
                  urls.py
                  wsgi.py
                  asgi.py
                  
                  1. __init__.py --> empty file that instructs Python to treat this dir as a Python package
                  2. settings.py --> contains all website settings, including registering any applications we create, the location of the our static files, database configuration details etc.
                  3. urls.py --> defines the sites URL-to-view mappings, maintain the all url mapping code
                  4. wsgi.py --> used to help django application communicate with the webserver( treat this is a boilerpalte)
                  5. asgi.py --> standard for python asyn web apps and serves to communicate with each other
                manage.py --> script is used to create applications, work with database and start the development web server.
                
   Create the catalog application:
    1. python manage.py startapp catalog
    
            locallibrary/
                manage.py
                locallibrary/
                catalog/
                    admin.py --> admin site configuration
                    apps.py --> application registration
                    models.py --> models
                    tests.py --> tests
                    views.py --> views
                    __init__.py --> empty file, will recognize the folder as a python package.
                    migrations/ --> used to store "migrations" -- files that allow you to automatically update your database as you modify you models
        
        Registering the catalog application:
        ------------------------------------
        
        Register new app --> django_projects/locallibrary/locallibrary/settings.py
        
        add new app into INSTALLED_APPS list ==> catalog.apps.CatalogConfig (This object was created for is in /catalog/apps.py)
        
        
        Specifying the database
        ------------------------
       setting.py ==> 
              1. since we are using default db, we are not making any changes in DATABASE list, this will be used for other project setting
              2. Changing timezone settings.py ==> TIME_ZONE
              3. SECRET_KEY--> This is the secret key that is used as part of Django website security strategy. 
              4. DEBUG
              
        Hooking up the URL mapper
        -------------------------
        
        project_folder --> urls.py 
              --> URL mappings are managed through urlpatterns variable, which is a python list of path() functions
              
        Add new list item to urlpatterns(urls.py)
              from django.urls import include
              
             urlpatterns += [
                  path('catalog/', include('catalog.urls')),
                  ]
       
       
       path('', RedirectView.as_view(url='catalog/', permanent=True)),  ==> This directly rediret the url to when user types http:/localhost:8000/catalog when user types 127.0.0.1:8000
        
       django does not serve static files like CSS, Javascript and images by default
          
          
      Running database migrations:
      ----------------------------
      
    When we create the website, Django automatically added a number of models for use by the admin section of the site.
    
    Run the following commands to define tables for those models in the database.
    
    python manage.py makemigrations
    python manage.py migrate
    
   These commands should be run everytime when your models change(addtion/removal)
   
  
  Running the website
  --------------------
  
  python migrate.py runserver
  
  
  You should re-run migrations and re-test the site whenever you make significant changes. 
  
  
  Part 3: Using Models
  ======================
  
  access and manage data through python objects referred to as models
  
  
  
  Model definitions:
  --------------------
  
  1. import models from django.db
        from django.db import models
        
  2. create a model class extends models.Model
        class MyModelName(models.Model):
        
  3. Define fields
        my_field_name = models.CharField(max_length=20, help_text="Enter the filed documentation")
  
      Field argument:
          help_text - Provide text label for HTML forms
          verbose_name - Human readable name for the field used in field labels
          default = default value for the field
          null = If true, Django store blank value as null, default value set to False
          blank - If true, field is allowed to be blank in your forms, default is false. This oftern used with null=True
          choices - group of choices for this field
          primary_key - If true, set the current field as the primary key for the model
          
        Common field types:
        
          1. CharField
          2. TextField
          3. IntergerField
          4. DateField/DateTimeField
          5. EmailField
          6. FileField/ImageField
          7. AutoField(special type of InterField that automatically increments)
          8. ForeignKey(one to many relationship)
          9. ManyToManyField
          
          Metadata(control the default ordering)
          
          class Meta:
              ordering = ['my_field_name']
              
         Methods
         
         def __str__(self): --> Human readable sring for each object
         
         
         def get_absolute_url(self): --> returns a URL for displaying individual model records on the website
                return reverse('model-detail-view', args=[str[self.id]])
        
        
  Creatiing and modifying records:
  
  record = MyModelName(my_field_name="instace#1')
  
  record.save()
  
  access and modifying the records by using record object.
  
  Searching for records:
  ----------------------
  
  all_books = Book.objects.all()
  
  Filter:
  ------
  
  wild_books = Book.objects.filter(tile_contains='wild')
 number_wild_books = wild_books.coutn() 
 
 contains = text contains
 icontains = text contains and case insensitive
 iexact = case insensitive and exact
 exact = case sensitive exact match
 in
 gt
 startwith
 
 
 e.g.
 
 # Will match on: Fiction, Science fiction, non-fiction etc.
books_containing_genre = Book.objects.filter(genre__name__icontains='fiction')

Re-run the database migrations:

python3 manage.py makemigrations
python3 manage.py migrate


Create an admin user:

python manage.py createsuperuser
 
 
 Registering models:
 -------------------
 
 open admin.py in the catalog application(locallib/catalog/admin.py)
 
 
 Register ModelAdmin class - Customize the admin page
 -----------------------------------------------------
 
 1. Register the admin class ==> admin.site.register(Author, AuthorAdmin) or @admin.register(Book) [decorator]
 2. update the display view ==> list_display = ('title', 'author', 'display_genre')
 3. Filter the values ==> list_filter = ('status', 'due_back')
 
 
 Organize detail view layout:
 =============================
 
 fields = ['first_name', 'last_name', ('date_of_birth', 'date_of_death')] -- Tuple will be displayed on the same row
 
 Sectioning the detail view:
 ===========================
 
 fieldsets = (
        (None, {
            'fields': ('book', 'imprint', 'id')
        }),
        ('Availability', {
            'fields': ('status', 'due_back')
        }),
    )
 
 
 Inline editing of associated records
 ====================================
 
 class BooksInstanceInline(admin.TabularInline):
    model = BookInstance

@admin.register(Book)
class BookAdmin(admin.ModelAdmin):
    list_display = ('title', 'author', 'display_genre')
    inlines = [BooksInstanceInline]
 
 
Creating our home page:
=======================

URL mapping==> 
    urlpatterns += [
    path('catalog/', include('catalog.urls')),
] 
===> This directs to catalog app urls.py

catalog/urls.py

urlpatterns = [
    path('', views.index, name='index'),
]

=>1st arg --> URL pattern
  views.index ==> index() is implemented in views.py
  name = 'index'--> unique view name used for reverse the mapper
   
 Template:
 
 Template variable ==> {{context variable}}
 
 template tag ==> {% %}
 
 loading static file or image  ==> {%load static %} and them use {%static path%}
 
 Linking to URLs
 
 <li><a href="{% url 'index' %}">Home</a></li> this tag accepts name of the path() function from urls.py
  
 
  
  
  
  
  
  
  
  
  
  
  
